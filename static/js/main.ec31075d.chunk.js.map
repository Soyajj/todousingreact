{"version":3,"sources":["components/TodoItems.js","components/Todos.js","components/Addtodo.js","components/layout/Header.js","components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","getStyle","textDecoration","props","todo","completed","color","this","id","title","style","className","padding","type","checked","onChange","markComplete","bind","delBtn","onClick","delTodo","Component","float","Todos","todos","map","key","Addtodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","placeholder","required","autoComplete","Header","Tasks","length","display","justifyContent","App","uuid","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec31075d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css'\n\nexport class TodoItems extends Component {\n    getStyle = () =>{\n        return{\n            textDecoration : this.props.todo.completed ? 'line-through' : 'none',\n            color : this.props.todo.completed? 'gray' : 'black'\n        }\n    }\n    render() {\n        const {id,title,completed} = this.props.todo;\n        return (\n            <div style = {this.getStyle()} className = \"todoitems\">\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\" style = {{padding : '5px'}}>\n                    <input type = \"checkbox\" checked = {completed}\n                    onChange = {this.props.markComplete.bind(this,id)}\n                    />\n                    <span className = \"todolist\">{title}</span>\n                    <button style={delBtn} onClick = {this.props.delTodo.bind(this, id)}\n                    className = \"btn btn-outline-danger btn-sm\"><i className = \"fa fa-trash\"/></button>\n                    <hr />\n                    </li>   \n               </ul>\n            </div>\n        )\n    }\n}\n\nconst delBtn = {\n    float : 'right',\n}\n\n\n\nexport default TodoItems\n","import React, { Component } from 'react';\nimport TodoItems from './TodoItems'\n\nexport class Todos extends Component {\n    render() {\n        return this.props.todos.map(todo => (\n            <TodoItems key = {todo.id} todo = {todo} markComplete = {this.props.markComplete} delTodo = {this.props.delTodo}/>\n        ))\n    }\n}\n\nexport default Todos\n","import React, { Component } from 'react';\nimport '../App.css'\n\nexport class Addtodo extends Component {\n    state = {\n        title : ''\n    }\n\n\n    onSubmit = (e) =>{\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title : ''});\n    }\n\n    onChange = (e) =>{\n        this.setState({[e.target.name] : e.target.value})\n    }\n    render() {\n        return (\n            <div className = \"addtodo\">\n                <form onSubmit = {this.onSubmit} className = \"inputsection\"> \n                <i className = \"fa fa-pencil fa-2x\" />\n                    <input type = \"text\" name = \"title\" placeholder =\"+ Add tasks...\" \n                        onChange = {this.onChange}\n                        value = {this.state.title}\n                        required\n                        autoComplete = \"off\"\n                        className = \"form-control form-control-sm\"\n                    />\n                    <button className = \"btn btn-outline-primary btn-sm\" type = \"submit\">Add</button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Addtodo\n\n\n","import React from 'react';\nimport '../../App.css'\n\nfunction Header() {\n    return (\n        <div>\n            <div className = \"header\">\n                <i className=\"fa fa-check-square fa-fw\"/>\n                Todo List\n             </div>\n        </div>\n    )\n}\n\n\n\nexport default Header\n","import React from 'react';\n\nfunction Tasks({length}){\n    return(\n        <div style = {{display: 'flex', justifyContent : 'center'}}>\n            <button type=\"button\" className=\"btn btn-info btn-sm\">\n                Tasks <span className=\"badge badge-light\">{length}</span>\n            </button>\n        </div>\n    )\n}\nexport default Tasks","import React, { Component } from 'react';\nimport Todos from './components/Todos';\nimport { v4 as uuid} from 'uuid';\nimport Addtodo from './components/Addtodo';\nimport Header from './components/layout/Header';\nimport Tasks from './components/Tasks';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos : [\n      {\n        id : uuid(),\n        title : 'Sample',\n        completed : false,\n      },\n    ]\n  }\n\n  markComplete = (id) =>{\n    this.setState({todos : [...this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed;\n      }\n      return todo\n    }\n    )]})\n  }\n\n  delTodo = (id) =>{\n    this.setState({todos : [...this.state.todos.filter(todo => (\n      todo.id !== id\n    ))]})\n  }\n\n  addTodo = (title) => {\n    const newTodo = {\n      id : uuid(),\n      title,\n      completed :false\n    }\n    this.setState({todos : [...this.state.todos, newTodo]})\n  }\n\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className = \"container\">\n        <Header />\n        <Addtodo addTodo = {this.addTodo} />\n        <Tasks length = {this.state.todos.length} />\n        <Todos todos = {this.state.todos} markComplete = {this.markComplete} delTodo = {this.delTodo}/>\n      </div>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}